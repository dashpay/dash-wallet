/*
 * Copyright 2022 Dash Core Group.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.dash.wallet.integrations.crowdnode

import junit.framework.TestCase.*
import org.bitcoinj.core.*
import org.bitcoinj.params.TestNet3Params
import org.dash.wallet.integrations.crowdnode.transactions.CrowdNodeDepositTx
import org.dash.wallet.integrations.crowdnode.transactions.CrowdNodeSignUpTx
import org.dash.wallet.integrations.crowdnode.transactions.CrowdNodeWithdrawalReceivedTx
import org.dashj.bls.Utils
import org.junit.Before
import org.junit.Test

class CrowdNodeTxFilterTest {
    private val networkParams = TestNet3Params.get()

    private val signUpData = "0100000001f15743be9d858f7e6213bca8262bda38b9b59d44747051899533764cd3ca6606000000006a4730440220412fb2a56090bc271d25fd66a095749bc8c9d4b8200716ed452e91870dddc43702206c3b42a0f3ef11da3a563960c9ac208b6d4da02bafecb06eb7a28d29f8b7cb0f012103691a23ea571114b17de25c310e2b5f978551e1547d1fa465fdb6bb72d17ba3adffffffff02204e0200000000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888ac9d6c0b00000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac00000000"
    private val signUpRequestTx = Transaction(networkParams, Utils.HEX.decode(signUpData))
    private val welcomeData = "020000000263779831af3973f7f8f1c390c363c3eae19bcc60c0296852ecea832e16022769010000006a473044022042dcb3849c7018cc99879bcea881284c3a5848ae5caf4c7d1390a9cbde812e780220557da9f91b088c5a59db6ed82ea34e5f5a4f5d1bf10fa5ccff920c4a461ecb4a012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff90bd741046ab7e68d532ac0466920729f3070b1184a4703ac620601ff594d0ff000000006a47304402202b512d7a20279a1aed12dd05619a2951412ff3d0ded96327a43ddd02dba0c1ad0220337f62aafb3721575e2ccd3c6bac97591186e6cca92f54896e08c1cd529e7be6012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02244e0000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac5c1dc4680a0000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888acfbdc0a00"
    private val welcomeResponseTx = Transaction(networkParams, Utils.HEX.decode(welcomeData))
    private val receivedData = "0200000001eb1543c0d57f5baa4f841b9017b7c9e056784b35c3771cbe3dbc7dc3d1f64f8e010000006b483045022100805c75979e175e7ed621ef7d22fe830a21137271e0f6bae52bb42a7386cf936102207770ccac9e5be357731fd01d205a7aec792413145ab966266a2e2f1df7182732012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02250fad02000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac10c9e24c000000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888acdbde0a00"
    private val receivedTx = Transaction(networkParams, Utils.HEX.decode(receivedData))

    @Before
    fun setup() {
        val signupConnected = "0100000001a14301088210333bd5d0959624b153d6d0dcfd5a67813ec11df4879808b1b6ac000000006a473044022000c5bb339303d916de5765446a93a1513d151407c598f0f7aba79ea62795892b022012f97f16d00876b08d8e55a8c99ad4b009615789c6e4322cdb760f4a649d3ed5012103626557ad8e11b2bf7004683e2bd634579329b00902e67177c768bfa76fc3796bffffffff02a0bb0d00000000001976a914f57766c540e7e165092e739e115383bd04d2c21888acfdd98a00000000001976a914bd065b89a786f96a4529a4dacc0bb4a14268147088ac00000000"
        val signupConnectedTx = Transaction(networkParams, Utils.HEX.decode(signupConnected))
        signUpRequestTx.inputs[0].connect(signupConnectedTx.outputs[0])

        val welcomeConnected = "0200000002f7f6beb8d49ec4639394a663cd3ae08d9382ecfbb38e9cb85deaf835b74ad1be000000006a47304402202b467d0ae5f40633500096b01dbc5952efca40d50143739dc92f2b9fc8cf479c02206d3a04f11538ce4ff664b168abad0b02d135b3ec571b390616ac76f888e0ecaf012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffffd979b8815c9a17e956011b7b9767dcb1237501832392a1f5d2ed2e0d785754c2010000006a473044022079f2e9dd53d838978fe82a6034894c062381ac32bce190e0d862efff7e4a5ef002200eee7a5bd39f084cd8dc73d50d1fc1388e998750db3fadbd74ff2537bef0cd8e012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02224e0000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888acf91ec3680a0000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888acfadc0a00"
        val welcomeConnectedTx = Transaction(networkParams, Utils.HEX.decode(welcomeConnected))
        welcomeResponseTx.inputs[0].connect(welcomeConnectedTx.outputs[0])

        val receivedConnected = "020000000110ae7a5bff9016348ea2babb8b614ccf498cc89b2dd00273b009874d33b5735a010000006b483045022100a8a27fd8a0a9579fccabb171604947a75223d27eb5ae28cc348ae9c682d24b2002205d27b13f124816789e940df33c78bf3dc3ef35ee1928cebb55ec32ed095f3e8f012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02304e0000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac2cd98f4f000000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888acdbde0a00"
        val receivedConnectedTx = Transaction(networkParams, Utils.HEX.decode(receivedConnected))
        receivedTx.inputs[0].connect(receivedConnectedTx.outputs[0])
    }

    @Test
    fun signUpTxFilter_correctMatch() {
        val filter = CrowdNodeSignUpTx(networkParams)

        assertTrue("SignUp tx doesn't match", filter.matches(signUpRequestTx))
        assertEquals(1, filter.fromAddresses.size)
        assertEquals("yihMSMoesHX1JhbntTiV5Nptf5NLrmFMCu", filter.fromAddresses.first().toBase58())

        var notSignUpData = "01000000033f90cbc2d751c77358b3ff37efd72936b389a17b9ec72bdec4678394814cfe2d000000006a473044022050d2f3b6f097f1973b29bb5a0e98f307f6fc338bb8d29e4a7eb257eebd147ccd022055f88aa06cf90aec97991db9c351fd622fa60fe2cb6bbe6df2ecfef03ca047fa012102d336120a91d7d3497056715f6078e36c56e84c41038cf630260ef3245f6ba39effffffff94cae0fa480e004218a66ea7eae8c0a1a39dbd8ebba966004ddfdcac1e11f089000000006b483045022100ed1fbe54b90c8d69e616b79ba5e03e192bdee6b26f66d40d9da14ae7c7e64a9c022062c54fb1635937a38f3b43b504777c9faf357734cad6f53130870f7e980a3be60121037c4c4205eceb06bbf1e4894e52ecddcf700e1a699e2a4cbee9fd7ed748fb7a59ffffffff3e2611f35c7a2fefadce6b115ce8e14b31b627667af9c04909c0ddcceb8294a3000000006a473044022036bed2e8600ed1a715618ca398553254c14fcea824b77ed784cee5f5b23b84df022041c4821e6e639169ddc891e4d6b4e146e5f4684e5687daf5fcce2fd1f73392230121037c4c4205eceb06bbf1e4894e52ecddcf700e1a699e2a4cbee9fd7ed748fb7a59ffffffff0260182300000000001976a9140205411ec940f9139ea72e3a999d21fceff671e688ac4dc27200000000001976a91425b2b9126bf32e6115a813d019e72b7b9106211b88ac00000000"
        var notSignUpTx = Transaction(networkParams, Utils.HEX.decode(notSignUpData))
        assertEquals(
            notSignUpTx.txId.toString(),
            "ceb0e5920ade494bb4f08f62f9c059c57a60841a9ef8b968e7dde247eb10f9e2"
        )
        assertFalse("Tx matches but should not", filter.matches(notSignUpTx))

        notSignUpData = "02000000024b86656e0590d048c666970225930d5806f746646eea0982be81fb354114e60d010000006a4730440220318c122e24d780b6123f001eb7fb006eda71a17067f25c96f067261da2fab4290220351d6a75c278d780550f0a5494082c749ed7737b4905c4383a206154ab4b7f94012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff476e14bb4fa20abc1fd23ef0ad17c2b65a6cf8959f51cfc412656a1a773c9249000000006a47304402201ebad0b1f3a2df05e9368d94a91970334283a5812537e34302260e8b6e124e180220141defc2b70fbd45ac4bb968ce9d51dc219d33709d2cc9fae2c73d61afe9f654012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02244e0000000000001976a9140a5d65dba28a8a9b50b2f0d50da31f24990856fb88ace3b180290a0000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888aca2dc0a00"
        notSignUpTx = Transaction(networkParams, Utils.HEX.decode(notSignUpData))
        assertFalse("Tx matches but should not", filter.matches(notSignUpTx))
    }

    @Test
    fun withdrawalReceived_correctMatch() {
        val filter = CrowdNodeWithdrawalReceivedTx(networkParams)
        assertFalse("Tx matches but should not", filter.matches(signUpRequestTx))
        assertFalse("Tx matches but should not", filter.matches(welcomeResponseTx))
        assertTrue("Tx doesn't match", filter.matches(receivedTx))

        val receivedData = "02000000016041b60434fd4353aad02bd3e8067f67b5cb26751c93154bedab79d65e2826c20100000069463043021f7ac8a5f56eb3ec847f891e20799e408d2079f4e671dff5383e688bf86d543e0220412ba4935e84ec7f5d90850aecc5b447b3f6bed82615bba0af52b6d29637cb28012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02e5250000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac13548d180c0000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888acb4de0a00"
        val receivedTx = Transaction(networkParams, Utils.HEX.decode(receivedData))
        val connectedData = "0200000002b069bf6ca5f28203f090396e23da59d271397c8978da359362bc6e38990a2631010000006a47304402204c31b657e983e3ea4abbb362fa5fd050085e92cffb723a12c714a625e87d6a0e0220299bf472f12eb54627339ab6b720aed1acc4f238790441deefc29d0ec44f3e10012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff472666d8c072985cb6bbf5ed749ee61d484e080e39817f03f33939f1697b449f000000006b483045022100ed26d531cf0ec33e36e086abfd3b6abad1bbb856b57298d7606bb24db6dbb37002203017a9a7b9ba93606b1047719616adc72456d24cd4ad1e50dee10c9cc961e2d8012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02304e0000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888acef7a8d180c0000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888ac86de0a00"
        val connectedTx = Transaction(networkParams, Utils.HEX.decode(connectedData))
        receivedTx.inputs[0].connect(connectedTx.outputs[0])

        assertTrue("Tx doesn't match", filter.matches(receivedTx))
    }

    @Test
    fun depositTx_correctMatch() {
        val filter = CrowdNodeDepositTx(Address.fromBase58(networkParams, "yihMSMoesHX1JhbntTiV5Nptf5NLrmFMCu"))

        assertFalse("Tx matches but should not", filter.matches(signUpRequestTx))
        assertFalse("Tx matches but should not", filter.matches(welcomeResponseTx))
        assertFalse("Tx matches but should not", filter.matches(receivedTx))

        val depositData = "010000000380171b155fae80a1015407f0ba29a40006ff2fbd2e81d71969e865610d36b05e010000006a473044022029b38ae385dfc481de21f82f96d528d2da08927e6a779a7d518b05ca47cd707a02205ddfeae5953695550acf017efca2338d9aa1caedf32960b7f82bf34bf99b8646012103691a23ea571114b17de25c310e2b5f978551e1547d1fa465fdb6bb72d17ba3adffffffff558815361e94ba890231e567190dd10ff599dc5d51d4893a1a81b71da6223576000000006a473044022065be5bfd08ee9960be4c1ce82e951432c2437e76291ec4c18cfb971203befc4e02202f5fdda35868916b0ce7f297e7e6605ccfbee83e0d188e35a76b2dd6dc8e9fcd012103691a23ea571114b17de25c310e2b5f978551e1547d1fa465fdb6bb72d17ba3adffffffff6e413a0400d210f391582b050fbbfea66472e705d6a9c6dbcbb25038bd06428b000000006b483045022100d2b7de552ca945e13b8754ab51499ce732f94cf9b5f4d1730d18270d91d648bc022065ff38acb907f0580a0b9eae80e6836e5e7e2e4466b986567f9e1eb8250ca6aa012103691a23ea571114b17de25c310e2b5f978551e1547d1fa465fdb6bb72d17ba3adffffffff0210530000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888acc0d8a700000000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888ac00000000"
        val dataConnected0 = "0100000001f09160ffa383d3aaf4cd8f8943b4d9050132448a4ba718d0462238456fd60535010000006a47304402200af78214fe9a60a8615080f3aef89b0a6129bbb5ca70a7c843fb4dd87a2d6b44022056bec0e4279377f82deed94e28607c75a4cf029c01c00506fb5226a9a3d5a164012103cc0bd3cb81e08fd09ee2a6f407dbe4020f12579f8197818d189b6c41318564ecffffffff02865d2d00000000001976a914e1cd0e852b0ea6a9b7d9c58881a4b3ff3842506d88aca8dca700000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac00000000"
        val dataConnected1 = "02000000026e413a0400d210f391582b050fbbfea66472e705d6a9c6dbcbb25038bd06428b010000006a47304402205e703cd097bb50aedb0013f4ed60cb7a4fb928414480d56121e93e5ee943f7890220711a681aa134a5385fe3692411a2f6ae447715f171e38f3e083e2090899e55b8012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff79ac9f85e66f787269d85dcafb4b7a132d04d8476f15432523adf3f3bbf851e1010000006a47304402205fb26b67d38ea82667cad0b7e8c5b6b8dc5244446326c2aed8b26c769eb9f46202206f88386025cf9cb30bdfdca20b9881db0751e19bbc9ec047fc674ced83e4656f012102bf7c36100b0d394e79a1704b8bf9e030a62e139a293f5da891671c56d555f732feffffff02304e0000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac905c2309010000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888ac50df0a00"
        val dataConnected2 = "01000000019858b2a28ca42a04e315cbede431104bef6060b5a7c6d526461f76e7a8f9ae2c010000006a47304402204629c835770e35d836fea256bf70addc680445e75161eee1662deea2ac3081910220230d9d573fedf568dd40badcec74890d54de88b9d3f7710572138425441fab55012103691a23ea571114b17de25c310e2b5f978551e1547d1fa465fdb6bb72d17ba3adffffffff0205030000000000001976a914f57766c540e7e165092e739e115383bd04d2c21888ac08520000000000001976a9140d5bcbeeb459af40f97fcb4a98e9d1ed13e904c888ac00000000"
        val depositTx = Transaction(networkParams, Utils.HEX.decode(depositData))
        val depositConnectedTx0 = Transaction(networkParams, Utils.HEX.decode(dataConnected0))
        depositTx.inputs[0].connect(depositConnectedTx0.outputs[0])
        val depositConnectedTx1 = Transaction(networkParams, Utils.HEX.decode(dataConnected1))
        depositTx.inputs[1].connect(depositConnectedTx1.outputs[0])
        val depositConnectedTx2 = Transaction(networkParams, Utils.HEX.decode(dataConnected2))
        depositTx.inputs[2].connect(depositConnectedTx2.outputs[0])

        assertTrue("Tx doesn't match", filter.matches(depositTx))
    }
}